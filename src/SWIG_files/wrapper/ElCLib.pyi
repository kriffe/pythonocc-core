from enum import IntEnum
from typing import overload, NewType, Optional, Tuple

from OCC.Core.Standard import *
from OCC.Core.NCollection import *
from OCC.Core.gp import *


class ElCLib:
	@staticmethod
	def AdjustPeriodic(self, UFirst: float, ULast: float, Precision: float) -> Tuple[float, float]: ...
	@overload
	@staticmethod
	def CircleD1(self, U: float, Pos: gp_Ax2, Radius: float, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def CircleD1(self, U: float, Pos: gp_Ax22d, Radius: float, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def CircleD2(self, U: float, Pos: gp_Ax2, Radius: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def CircleD2(self, U: float, Pos: gp_Ax22d, Radius: float, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def CircleD3(self, U: float, Pos: gp_Ax2, Radius: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def CircleD3(self, U: float, Pos: gp_Ax22d, Radius: float, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d, V3: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def CircleDN(self, U: float, Pos: gp_Ax2, Radius: float, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def CircleDN(self, U: float, Pos: gp_Ax22d, Radius: float, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def CircleParameter(self, Pos: gp_Ax2, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def CircleParameter(self, Pos: gp_Ax22d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def CircleValue(self, U: float, Pos: gp_Ax2, Radius: float) -> gp_Pnt: ...
	@overload
	@staticmethod
	def CircleValue(self, U: float, Pos: gp_Ax22d, Radius: float) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def D1(self, U: float, L: gp_Lin, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, C: gp_Circ, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, E: gp_Elips, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, H: gp_Hypr, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, Prb: gp_Parab, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, L: gp_Lin2d, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, C: gp_Circ2d, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, E: gp_Elips2d, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, H: gp_Hypr2d, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D1(self, U: float, Prb: gp_Parab2d, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, C: gp_Circ, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, E: gp_Elips, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, H: gp_Hypr, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, Prb: gp_Parab, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, C: gp_Circ2d, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, E: gp_Elips2d, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, H: gp_Hypr2d, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D2(self, U: float, Prb: gp_Parab2d, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D3(self, U: float, C: gp_Circ, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D3(self, U: float, E: gp_Elips, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D3(self, U: float, H: gp_Hypr, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def D3(self, U: float, C: gp_Circ2d, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d, V3: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D3(self, U: float, E: gp_Elips2d, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d, V3: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def D3(self, U: float, H: gp_Hypr2d, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d, V3: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def DN(self, U: float, L: gp_Lin, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def DN(self, U: float, C: gp_Circ, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def DN(self, U: float, E: gp_Elips, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def DN(self, U: float, H: gp_Hypr, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def DN(self, U: float, Prb: gp_Parab, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def DN(self, U: float, L: gp_Lin2d, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def DN(self, U: float, C: gp_Circ2d, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def DN(self, U: float, E: gp_Elips2d, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def DN(self, U: float, H: gp_Hypr2d, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def DN(self, U: float, Prb: gp_Parab2d, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def EllipseD1(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def EllipseD1(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def EllipseD2(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def EllipseD2(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def EllipseD3(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def EllipseD3(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d, V3: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def EllipseDN(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def EllipseDN(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def EllipseParameter(self, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def EllipseParameter(self, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def EllipseValue(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float) -> gp_Pnt: ...
	@overload
	@staticmethod
	def EllipseValue(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def HyperbolaD1(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def HyperbolaD1(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def HyperbolaD2(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def HyperbolaD2(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def HyperbolaD3(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec, V3: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def HyperbolaD3(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d, V3: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def HyperbolaDN(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def HyperbolaDN(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def HyperbolaParameter(self, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def HyperbolaParameter(self, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def HyperbolaValue(self, U: float, Pos: gp_Ax2, MajorRadius: float, MinorRadius: float) -> gp_Pnt: ...
	@overload
	@staticmethod
	def HyperbolaValue(self, U: float, Pos: gp_Ax22d, MajorRadius: float, MinorRadius: float) -> gp_Pnt2d: ...
	@staticmethod
	def InPeriod(self, U: float, UFirst: float, ULast: float) -> float: ...
	@overload
	@staticmethod
	def LineD1(self, U: float, Pos: gp_Ax1, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def LineD1(self, U: float, Pos: gp_Ax2d, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def LineDN(self, U: float, Pos: gp_Ax1, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def LineDN(self, U: float, Pos: gp_Ax2d, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def LineParameter(self, Pos: gp_Ax1, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def LineParameter(self, Pos: gp_Ax2d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def LineValue(self, U: float, Pos: gp_Ax1) -> gp_Pnt: ...
	@overload
	@staticmethod
	def LineValue(self, U: float, Pos: gp_Ax2d) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def ParabolaD1(self, U: float, Pos: gp_Ax2, Focal: float, P: gp_Pnt, V1: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def ParabolaD1(self, U: float, Pos: gp_Ax22d, Focal: float, P: gp_Pnt2d, V1: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def ParabolaD2(self, U: float, Pos: gp_Ax2, Focal: float, P: gp_Pnt, V1: gp_Vec, V2: gp_Vec) -> None: ...
	@overload
	@staticmethod
	def ParabolaD2(self, U: float, Pos: gp_Ax22d, Focal: float, P: gp_Pnt2d, V1: gp_Vec2d, V2: gp_Vec2d) -> None: ...
	@overload
	@staticmethod
	def ParabolaDN(self, U: float, Pos: gp_Ax2, Focal: float, N: int) -> gp_Vec: ...
	@overload
	@staticmethod
	def ParabolaDN(self, U: float, Pos: gp_Ax22d, Focal: float, N: int) -> gp_Vec2d: ...
	@overload
	@staticmethod
	def ParabolaParameter(self, Pos: gp_Ax2, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def ParabolaParameter(self, Pos: gp_Ax22d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def ParabolaValue(self, U: float, Pos: gp_Ax2, Focal: float) -> gp_Pnt: ...
	@overload
	@staticmethod
	def ParabolaValue(self, U: float, Pos: gp_Ax22d, Focal: float) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def Parameter(self, L: gp_Lin, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, L: gp_Lin2d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, C: gp_Circ, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, C: gp_Circ2d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, E: gp_Elips, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, E: gp_Elips2d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, H: gp_Hypr, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, H: gp_Hypr2d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, Prb: gp_Parab, P: gp_Pnt) -> float: ...
	@overload
	@staticmethod
	def Parameter(self, Prb: gp_Parab2d, P: gp_Pnt2d) -> float: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, P: gp_Pnt2d) -> gp_Pnt: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, V: gp_Vec2d) -> gp_Vec: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, V: gp_Dir2d) -> gp_Dir: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, A: gp_Ax2d) -> gp_Ax1: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, A: gp_Ax22d) -> gp_Ax2: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, L: gp_Lin2d) -> gp_Lin: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, C: gp_Circ2d) -> gp_Circ: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, E: gp_Elips2d) -> gp_Elips: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, H: gp_Hypr2d) -> gp_Hypr: ...
	@overload
	@staticmethod
	def To3d(self, Pos: gp_Ax2, Prb: gp_Parab2d) -> gp_Parab: ...
	@overload
	@staticmethod
	def Value(self, U: float, L: gp_Lin) -> gp_Pnt: ...
	@overload
	@staticmethod
	def Value(self, U: float, C: gp_Circ) -> gp_Pnt: ...
	@overload
	@staticmethod
	def Value(self, U: float, E: gp_Elips) -> gp_Pnt: ...
	@overload
	@staticmethod
	def Value(self, U: float, H: gp_Hypr) -> gp_Pnt: ...
	@overload
	@staticmethod
	def Value(self, U: float, Prb: gp_Parab) -> gp_Pnt: ...
	@overload
	@staticmethod
	def Value(self, U: float, L: gp_Lin2d) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def Value(self, U: float, C: gp_Circ2d) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def Value(self, U: float, E: gp_Elips2d) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def Value(self, U: float, H: gp_Hypr2d) -> gp_Pnt2d: ...
	@overload
	@staticmethod
	def Value(self, U: float, Prb: gp_Parab2d) -> gp_Pnt2d: ...
